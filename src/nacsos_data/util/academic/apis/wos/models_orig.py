# generated by datamodel-codegen:
#   filename:  api.json
#   timestamp: 2025-06-25T10:17:25+00:00
#
# curl 'https://developer.clarivate.com/apis/wos/swagger' \
#   -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:139.0) Gecko/20100101 Firefox/139.0' \
#   -H 'Accept: application/json,*/*' \
#   -H 'Accept-Language: en-US,en;q=0.5' \
#   -H 'Accept-Encoding: gzip, deflate, br, zstd' \
#   -H 'Referer: https://api.clarivate.com/' \
#   -H 'Origin: https://api.clarivate.com' \
#   -H 'DNT: 1' \
#   -H 'Sec-GPC: 1' \
#   -H 'Connection: keep-alive' \
#   -H 'Sec-Fetch-Dest: empty' \
#   -H 'Sec-Fetch-Mode: cors' \
#   -H 'Sec-Fetch-Site: same-site' \
#   -H 'Priority: u=4' \
#   -H 'TE: trailers' > scratch/academic_apis/api.json
#
# datamodel-codegen --input-file-type openapi --input scratch/academic_apis/api.json --output src/nacsos_data/util/academic/apis/wos_models.py

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel as PydanticBaseModel, Field, RootModel, field_validator, ConfigDict


class BaseModel(PydanticBaseModel):
    # model_config = ConfigDict(coerce_numbers_to_str=True, strict=False)

    @field_validator('*')
    @classmethod
    def empty_str_to_none(cls, v):
        if v == '':
            return None
        return v



class ValItem(BaseModel):
    name: str | None = None


class Map1(BaseModel):
    val: list[ValItem] | None = None


class Map(BaseModel):
    name: str | None = Field(None, examples=['QueryResultT'])
    map: Map1 | None = None


class MapItem(BaseModel):
    val: list[ValItem] | None = None


class ListModel(BaseModel):
    name: str | None = Field(None, examples=['Data'])
    map: list[MapItem] | None = None


class ReferenceResponseXML(BaseModel):
    map: Map | None = None
    list: ListModel | None = None


class CitationReportResponseItem(BaseModel):
    TimesCitedSansSelf: str | None = None
    ReportLevel: str | None = None
    AveragePerItem: str | None = None
    TimesCited: str | None = None
    DedupedTimesCited: str | None = None
    CitingYears: dict[str, Any] | None = None
    CitingItemsSansSelf: str | None = None
    AveragePerYear: str | None = None
    HValue: str | None = None


class CitationReportResponse(RootModel):
    root: list[CitationReportResponseItem]


class MapItem1(BaseModel):
    val: list[ValItem] | None = None


class List1(BaseModel):
    map: list[MapItem1] | None = None


class CitationReportResponseXML(BaseModel):
    list: List1 | None = None


class QueryResultT(BaseModel):
    QueryID: int | None = None
    RecordsSearched: int | None = None
    RecordsFound: int | None = None


class ReferenceRecord(BaseModel):
    UID: str | None = Field(None, examples=['WOS:001020694100001'])
    citedAuthor: str | None = None
    timesCited: int | None = None
    year: int | None = None
    page: int | None = None
    citedWork: str | None = None
    citedTitle: str | None = None
    doi: str | None = None


class Page(BaseModel):
    end: int | None = Field(None, examples=[11])
    begin: int | None = Field(None, examples=[9])
    page_count: int | None = Field(None, examples=[2])
    content: str | None = Field(None, examples=['9-11'])


class PubInfo(BaseModel):
    coverdate: int | str | None = Field(None, examples=['OCT 2019'])
    vol: int | None = Field(None, examples=[203])
    journal_oas_gold: str | None = Field(None, examples=['N'])
    has_citation_context: str | None = Field(None, examples=['Y'])
    pubyear: int | None = Field(None, examples=[2019])
    issue: int | None = Field(None, examples=[27])
    special_issue: str | None = Field(None, examples=['SI'])
    sortdate: str | None = Field(None, examples=['2019-08-21'])
    has_abstract: str | None = Field(None, examples=['N'])
    pubmonth: str | None = Field(None, examples=['OCT'])
    pubtype: str | None = Field(None, examples=['Journal'])
    early_access_month: int | None = Field(None, examples=['08'])
    early_access_date: str | None = Field(None, examples=['AUG 2019'])
    early_access_year: int | None = Field(None, examples=[2019])
    page: Page | None = None


class DataItemId(BaseModel):
    type: str | None = None
    content: str | None = None


class DataItemIds(BaseModel):
    data_item_id: DataItemId | None = Field(None, alias='data-item-id')


class PreferredName(BaseModel):
    full_name: str | None = None
    last_name: str | None = None
    middle_name: str | None = None
    first_name: str | None = None


class NameItem(BaseModel):
    seq_no: int | None = None
    role: str | None = None
    claim_status: bool | None = None
    full_name: str | None = None
    addr_no: list[int] | None = None
    reprint: str | None = None
    last_name: str | None = None
    display_name: str | None = None
    wos_standard: str | None = None
    r_id: str | None = None
    daisng_id: int | None = None
    orcid_id: str | None = None
    noncore_startyear: int | None = None
    noncore_endyear: int | None = None
    first_name: str | None = None
    data_item_ids: DataItemIds | None = Field(None, alias='data-item-ids')
    preferred_name: PreferredName | None = None


class Names(BaseModel):
    count: int | None = None
    name: list[NameItem] | None = None


class Doctypes(BaseModel):
    doctype: list[str] | None = None
    count: int | None = None


class Name(BaseModel):
    seq_no: int | None = None
    role: str | None = None
    full_name: str | None = None
    unified_name: str | None = None
    addr_no: int | None = None
    display_name: str | None = None


class Names1(BaseModel):
    count: int | None = None
    name: Name | None = None


class UrlSpec(BaseModel):
    url: str | None = None


class AddressSpec(BaseModel):
    city: str | None = None
    addr_no: int | None = None
    full_address: str | None = None
    url_spec: UrlSpec | None = None


class Publisher(BaseModel):
    names: Names1 | None = None
    address_spec: AddressSpec | None = None


class Publishers(BaseModel):
    publisher: Publisher | None = None


class WUIDT(BaseModel):
    coll_id: str | None = Field(None, examples=['WOS'])


class EditionItem(BaseModel):
    value: str | None = Field(None, examples=['WOS.SSCI'])


class EWUIDT(BaseModel):
    WUID: WUIDT | None = None
    edition: list[EditionItem] | None = None


class TitleItem(BaseModel):
    type: str | None = None
    content: str | None = None


class Titles(BaseModel):
    count: int | None = None
    title: list[TitleItem] | None = None


class Summary(BaseModel):
    pub_info: PubInfo | None = None
    names: Names | None = None
    doctypes: Doctypes | None = None
    publishers: Publishers | None = None
    EWUID: EWUIDT | None = None
    titles: Titles | None = None


class Ids(BaseModel):
    avail: str | None = None
    content: str | None = None


class BibPagecount(BaseModel):
    type: str | None = None
    content: int | None = None


class KeywordsPlus(BaseModel):
    count: int | None = None
    keyword: list[str] | None = None


class Item(BaseModel):
    xsi_type: str | None = Field(None, alias='xsi:type')
    coll_id: str | None = None
    ids: Ids | None = None
    xmlns_xsi: str | None = Field(None, alias='xmlns:xsi')
    bib_pagecount: BibPagecount | None = None
    keywords_plus: KeywordsPlus | None = None
    bib_id: str | None = None


class DataItemIds1(BaseModel):
    data_item_id: DataItemId | None = Field(None, alias='data-item-id')


class NameItem1(BaseModel):
    seq_no: int | None = None
    role: str | None = None
    claim_status: bool | None = None
    full_name: str | None = None
    addr_no: list[int] | None = None
    reprint: str | None = None
    last_name: str | None = None
    display_name: str | None = None
    wos_standard: str | None = None
    r_id: str | None = None
    daisng_id: int | None = None
    orcid_id: str | None = None
    noncore_startyear: int | None = None
    noncore_endyear: int | None = None
    first_name: str | None = None
    data_item_ids: DataItemIds1 | None = Field(None, alias='data-item-ids')
    preferred_name: PreferredName | None = None


class Names2(BaseModel):
    count: int | None = None
    name: list[NameItem1] | None = None


class Zip(BaseModel):
    location: str | None = None
    content: int | str | None = None


class OrganizationItem(BaseModel):
    pref: str | None = None
    content: str | None = None


class Organizations(BaseModel):
    organization: list[OrganizationItem] | None = None
    count: int | None = None


class SuborganizationItem(BaseModel):
    count: int | None = None
    suborganization: str | None = None


class Suborganizations(BaseModel):
    count: int | None = None
    suborganization: list[SuborganizationItem] | None = None


class AddressSpec1(BaseModel):
    zip: Zip | None = None
    country: str | None = None
    city: str | None = None
    addr_no: int | None = None
    organizations: Organizations | None = None
    full_address: str | None = None
    state: str | None = None
    suborganizations: Suborganizations | None = None


class AddressName(BaseModel):
    names: Names2 | None = None
    address_spec: AddressSpec1 | None = None


class DataItemIds2(BaseModel):
    data_item_id: DataItemId | None = Field(None, alias='data-item-id')


class NameItem2(BaseModel):
    seq_no: int | None = None
    role: str | None = None
    claim_status: bool | None = None
    full_name: str | None = None
    addr_no: list[int] | None = None
    reprint: str | None = None
    last_name: str | None = None
    display_name: str | None = None
    wos_standard: str | None = None
    r_id: str | None = None
    daisng_id: int | None = None
    orcid_id: str | None = None
    noncore_startyear: int | None = None
    noncore_endyear: int | None = None
    first_name: str | None = None
    data_item_ids: DataItemIds2 | None = Field(None, alias='data-item-ids')
    preferred_name: PreferredName | None = None


class Names3(BaseModel):
    count: int | None = None
    name: list[NameItem2] | None = None


class Organizations1(BaseModel):
    organization: list[OrganizationItem] | None = None
    count: int | None = None


class Suborganizations1(BaseModel):
    count: int | None = None
    suborganization: list[SuborganizationItem] | None = None


class AddressSpec2(BaseModel):
    zip: Zip | None = None
    country: str | None = None
    city: str | None = None
    addr_no: int | None = None
    organizations: Organizations1 | None = None
    full_address: str | None = None
    state: str | None = None
    suborganizations: Suborganizations1 | None = None


class AddressName1(BaseModel):
    names: Names3 | None = None
    address_spec: AddressSpec2 | None = None


class Addresses(BaseModel):
    count: int | None = None
    address_name: list[AddressName] | list[AddressName1] | None = None


class Subheadings(BaseModel):
    count: int | None = None
    subheading: list[str] | None = None


class SubjectItem(BaseModel):
    ascatype: str | None = None
    code: str | None = None
    content: str | None = None


class Subjects(BaseModel):
    subject: list[SubjectItem] | None = None
    count: int | None = None


class Headings(BaseModel):
    heading: str | None = None
    count: int | None = None


class CategoryInfo(BaseModel):
    subheadings: Subheadings | None = None
    subjects: Subjects | None = None
    headings: Headings | None = None


class Language(BaseModel):
    type: str | None = None
    content: str | None = None


class NormalizedLanguages(BaseModel):
    count: int | None = None
    language: Language | None = None


class Languages(BaseModel):
    count: int | None = None
    language: Language | None = None


class Keywords(BaseModel):
    count: int | None = None
    keyword: list[str] | None = None


class Refs(BaseModel):
    count: int | None = None


class Name1(BaseModel):
    seq_no: int | None = None
    role: str | None = None
    full_name: str | None = None
    reprint: str | None = None
    addr_no: int | None = None
    last_name: str | None = None
    display_name: str | None = None
    wos_standard: str | None = None
    first_name: str | None = None


class Names4(BaseModel):
    count: int | None = None
    name: Name1 | list[Name1] | None = None


class Zip2(BaseModel):
    location: str | None = None
    content: int | None = None


class Organizations2(BaseModel):
    organization: list[OrganizationItem] | None = None
    count: int | None = None


class Suborganizations2(BaseModel):
    count: int | None = None
    suborganization: list[str] | None = None


class AddressSpec3(BaseModel):
    zip: Zip2 | None = None
    country: str | None = None
    city: str | None = None
    street: str | None = None
    addr_no: int | None = None
    organizations: Organizations2 | None = None
    full_address: str | None = None
    state: str | None = None
    suborganizations: Suborganizations2 | None = None


class AddressName2(BaseModel):
    names: Names4 | None = None
    address_spec: AddressSpec3 | None = None


class ReprintAddresses(BaseModel):
    count: int | None = None
    address_name: AddressName2 | None = None


class AbstractText(BaseModel):
    p: str | None = None
    count: int | None = None


class Abstract(BaseModel):
    abstract_text: AbstractText | None = None


class Abstracts(BaseModel):
    count: int | None = None
    abstract: Abstract | None = None


class GrantAgencyName(BaseModel):
    pref: str | None = None
    content: str | None = None


class GrantIds(BaseModel):
    grant_id: list[str] | None = None
    count: int | None = None


class PrincipalInvestigatorInstitution1(BaseModel):
    lang_id: str | None = None
    content: str | None = None


class PrincipalInvestigatorInstitution(BaseModel):
    principalInvestigatorInstitution: PrincipalInvestigatorInstitution1 | None = None


class PrincipalInvestigatorItem(BaseModel):
    seq_no: int | None = None
    lang_id: str | None = None
    content: str | None = None


class PrincipalInvestigators(BaseModel):
    principalInvestigatorInstitutions: list[PrincipalInvestigatorInstitution] | None = None
    principalInvestigator: list[PrincipalInvestigatorItem] | None = None


class GrantProjectTitle(BaseModel):
    lang_id: str | None = None
    content: str | None = None


class StartDate(BaseModel):
    startYear: int | None = None
    content: str | None = None


class GrantSummary(BaseModel):
    lang_id: str | None = None
    content: str | None = None


class GrantDataItem(BaseModel):
    principalInvestigators: PrincipalInvestigators | None = None
    grantStatus: str | None = None
    grantProjectTitle: GrantProjectTitle | None = None
    endDate: str | None = None
    totalAwardAmount: str | None = None
    coPrincipalInvestigators: str | None = None
    currency: str | None = None
    grantType: str | None = Field(
        None, examples=["Scholarships abroad - Research Internship - Master's degree"]
    )
    startDate: StartDate | None = None
    grantSummary: GrantSummary | None = None


class GrantData(BaseModel):
    count: int | None = None
    grantDataItem: GrantDataItem | None = None


class Grant(BaseModel):
    grant_agency_names: list[GrantAgencyName] | None = None
    grant_ids: GrantIds | None = None
    grant_source: str | None = None
    grant_data: GrantData | None = None
    grant_agency: str | None = None


class Grants(BaseModel):
    count: int | None = None
    grant: Grant | None = None


class FundText(BaseModel):
    p: str | None = None


class FundAck(BaseModel):
    grants: Grants | None = None
    fund_text: FundText | None = None


class NormalizedDoctypes(BaseModel):
    doctype: list[str] | None = None
    count: int | None = None


class FullrecordMetadata(BaseModel):
    addresses: Addresses | None = None
    category_info: CategoryInfo | None = None
    normalized_languages: NormalizedLanguages | None = None
    languages: Languages | None = None
    keywords: Keywords | None = None
    refs: Refs | None = None
    reprint_addresses: ReprintAddresses | None = None
    abstracts: Abstracts | None = None
    fund_ack: FundAck | None = None
    normalized_doctypes: NormalizedDoctypes | None = None


class Name3(BaseModel):
    seq_no: int | None = None
    role: str | None = None
    full_name: str | None = None
    last_name: str | None = None
    display_name: str | None = None
    r_id: str | None = None
    first_name: str | None = None
    orcid_id: str | None = None


class Contributor(BaseModel):
    name: Name3 | None = None


class Contributors(BaseModel):
    contributor: Contributor | None = None
    count: int | None = None


class StaticData(BaseModel):
    summary: Summary | None = None
    item: Item | None = None
    fullrecord_metadata: FullrecordMetadata | None = None
    contributors: Contributors | None = None


class Dates(BaseModel):
    date_modified: str | None = None
    date_created: str | None = None
    date_loaded: str | None = None


class FuncClass(Enum):
    background = 'background'
    basis = 'basis'
    discuss = 'discuss'
    support = 'support'
    differ = 'differ'


class FunctionTcItem(BaseModel):
    local_count: int | None = Field(
        None, description='The number of citations in this context'
    )
    func_class: FuncClass | None = Field(
        None,
        description='* background - previously published research that orients the current study within a scholarly area.\n* basis - references that report the data sets, methods, concepts and ideas that the author is using for her work directly or on which the author bases her work\n* discuss - references mentioned because the current study is going into a more detailed discussion.\n* support - references which the current study reports to have similar results to. This may also refer to similarities in methodology or in some cases replication of results.\n* differ - references which the current study reports to have differing results to. This may also refer to differences in methodology or differences in sample sizes, affecting results.\n',
    )


class TcListCc(BaseModel):
    dedup_total_count: int | None = Field(
        None, description='Overall number of citing items with citation context'
    )
    function_tc: list[FunctionTcItem] | None = Field(
        None, description='Breakdown of how this article has been mentioned'
    )


class SubjectItem1(BaseModel):
    content_type: str | None = Field(None, alias='content-type')
    content_id: str | None = Field(None, alias='content-id')
    content: str | None = None


class SubjGroup(BaseModel):
    subject: list[SubjectItem1] | None = None


class CitationTopics(BaseModel):
    subj_group: SubjGroup | None = Field(None, alias='subj-group')


class SiloTcItem(BaseModel):
    coll_id: str | None = None
    local_count: int | None = None


class TcList(BaseModel):
    silo_tc: list[SiloTcItem] | None = None


class CitationRelated(BaseModel):
    tc_list_cc: TcListCc | None = Field(
        None,
        description='Citation classifications - describe why it has beed cited. More details [here](https://clarivate.com/webofsciencegroup/release-notes/wos/new-wos-may-12-release-notes/)',
    )
    citation_topics: CitationTopics | None = None
    tc_list: TcList | None = None


class IdentifierItem(BaseModel):
    type: str | None = None
    value: str | None = None


class Identifiers(BaseModel):
    identifier: list[IdentifierItem] | None = None


class ClusterRelated(BaseModel):
    identifiers: Identifiers | None = None


class WosUsage(BaseModel):
    last180days: int | None = None
    alltime: int | None = None


class DynamicData(BaseModel):
    citation_related: CitationRelated | None = None
    cluster_related: ClusterRelated | None = None
    wos_usage: WosUsage | None = None


class WosRecord(BaseModel):
    UID: str = Field(..., examples=['WOS:001020694100001'])
    static_data: StaticData
    dates: Dates | None = None
    r_id_disclaimer: str = Field(..., examples=['ResearcherID data provided by Clarivate'])
    dynamic_data: DynamicData


class PubInfo1(BaseModel):
    vol: int | None = Field(None, examples=[203])
    pubyear: int | None = Field(None, examples=[2019])
    issue: int | None = Field(None, examples=[27])
    pubtype: str | None = Field(None, examples=['Journal'])


class NameItem3(BaseModel):
    seq_no: int | None = None
    role: str | None = None
    display_name: str | None = None
    wos_standard: str | None = None
    r_id: str | None = None
    daisng_id: int | None = None


class Names5(BaseModel):
    count: int | None = None
    name: list[NameItem3] | None = None


class Titles1(BaseModel):
    count: int | None = None
    title: list[TitleItem] | None = None


class Summary1(BaseModel):
    pub_info: PubInfo1 | None = None
    names: Names5 | None = None
    doctypes: Doctypes | None = None
    titles: Titles1 | None = None


class FullrecordMetadata1(BaseModel):
    keywords: Keywords | None = None
    refs: Refs | None = None
    normalized_doctypes: NormalizedDoctypes | None = None


class StaticData1(BaseModel):
    summary: Summary1 | None = None
    fullrecord_metadata: FullrecordMetadata1 | None = None


class FunctionTcItem1(BaseModel):
    local_count: int | None = Field(
        None, description='The number of citations in this context'
    )
    func_class: FuncClass | None = Field(
        None,
        description='* background - previously published research that orients the current study within a scholarly area.\n* basis - references that report the data sets, methods, concepts and ideas that the author is using for her work directly or on which the author bases her work\n* discuss - references mentioned because the current study is going into a more detailed discussion.\n* support - references which the current study reports to have similar results to. This may also refer to similarities in methodology or in some cases replication of results.\n* differ - references which the current study reports to have differing results to. This may also refer to differences in methodology or differences in sample sizes, affecting results.\n',
    )


class TcListCc1(BaseModel):
    dedup_total_count: int | None = Field(
        None, description='Overall number of citing items with citation context'
    )
    function_tc: list[FunctionTcItem1] | None = Field(
        None, description='Breakdown of how this article has been mentioned'
    )


class SubjGroup1(BaseModel):
    subject: list[SubjectItem1] | None = None


class CitationTopics1(BaseModel):
    subj_group: SubjGroup1 | None = Field(None, alias='subj-group')


class TcList1(BaseModel):
    silo_tc: list[SiloTcItem] | None = None


class CitationRelated1(BaseModel):
    tc_list_cc: TcListCc1 | None = Field(
        None,
        description='Citation classifications - describe why it has beed cited. More details [here](https://clarivate.com/webofsciencegroup/release-notes/wos/new-wos-may-12-release-notes/)',
    )
    citation_topics: CitationTopics1 | None = None
    tc_list: TcList1 | None = None


class Identifiers1(BaseModel):
    identifier: list[IdentifierItem] | None = None


class ClusterRelated1(BaseModel):
    identifiers: Identifiers1 | None = None


class DynamicData1(BaseModel):
    citation_related: CitationRelated1 | None = None
    cluster_related: ClusterRelated1 | None = None


class WosShortRecord(BaseModel):
    UID: str = Field(..., examples=['WOS:001020694100001'])
    static_data: StaticData1
    r_id_disclaimer: str = Field(
        ..., examples=['ResearcherID data provided by Clarivate Analytics']
    )
    dynamic_data: DynamicData1


class EWUID1(BaseModel):
    WUID: WUIDT | None = None
    edition: list[EditionItem] | None = None


class Page1(BaseModel):
    end: int | None = Field(None, examples=[11])
    begin: int | None = Field(None, examples=[9])
    page_count: int | None = Field(None, examples=[2])


class PubInfo2(BaseModel):
    coverdate: str | None = Field(None, examples=['OCT 2019'])
    vol: int | None = Field(None, examples=[203])
    journal_oas_gold: str | None = Field(None, examples=['N'])
    has_citation_context: str | None = Field(None, examples=['Y'])
    pubyear: int | None = Field(None, examples=[2019])
    issue: int | None = Field(None, examples=[27])
    special_issue: str | None = Field(None, examples=['SI'])
    sortdate: str | None = Field(None, examples=['2019-08-21'])
    has_abstract: str | None = Field(None, examples=['N'])
    pubmonth: str | None = Field(None, examples=['OCT'])
    pubtype: str | None = Field(None, examples=['Journal'])
    early_access_month: int | None = Field(None, examples=['08'])
    early_access_date: str | None = Field(None, examples=['AUG 2019'])
    early_access_year: int | None = None
    page: Page1 | None = None


class TitleItem2(BaseModel):
    type: str | None = Field(None, examples=['source'])


class Titles2(BaseModel):
    count: int | None = Field(None, examples=[6])
    title: list[TitleItem2] | None = None


class DataItemId3(BaseModel):
    type: str | None = Field(None, examples=['person'])


class DataItemIds3(BaseModel):
    data_item_id: DataItemId3 | None = Field(None, alias='data-item-id')


class NameItem4(BaseModel):
    seq_no: int | None = Field(None, examples=[1])
    role: str | None = Field(None, examples=['author'])
    claim_status: bool | None = Field(None, examples=[False])
    r_id: str | None = Field(None, examples=['CFP-5648-2022'])
    daisng_id: int | None = Field(None, examples=[5206054])
    orcid_id: str | None = Field(None, examples=['0000-0001-9349-1715'])
    addr_no: str | None = Field(None, examples=['1 2 8'])
    reprint: str | None = Field(None, examples=['Y'])
    full_name: str | None = Field(None, examples=['Lauridsen, S. V.'])
    first_name: str | None = Field(None, examples=['S. V.'])
    last_name: str | None = Field(None, examples=['Lauridsen'])
    display_name: str | None = Field(None, examples=['Lauridsen, S. V.'])
    wos_standard: str | None = Field(None, examples=['Lauridsen, SV'])
    noncore_startyear: int | None = Field(None, examples=[2011])
    noncore_endyear: int | None = Field(None, examples=[2023])
    data_item_ids: DataItemIds3 | None = Field(None, alias='data-item-ids')
    preferred_name: PreferredName | None = None


class Names6(BaseModel):
    count: int | None = Field(None, examples=[1])
    name: list[NameItem4] | None = None


class Doctypes2(BaseModel):
    doctype: list[str] | None = None
    count: int | None = Field(None, examples=[2])


class Name4(BaseModel):
    seq_no: int | None = Field(None, examples=[1])
    role: str | None = Field(None, examples=['publisher'])
    full_name: str | None = Field(None, examples=['TAYLOR & FRANCIS LTD'])
    unified_name: str | None = Field(None, examples=['Taylor & Francis'])
    addr_no: int | None = Field(None, examples=[1])
    display_name: str | None = Field(None, examples=['TAYLOR & FRANCIS LTD'])


class Names7(BaseModel):
    count: int | None = Field(None, examples=[1])
    name: Name4 | None = None


class AddressSpec4(BaseModel):
    city: str | None = Field(None, examples=['ABINGDON'])
    addr_no: int | None = Field(None, examples=[1])
    full_address: str | None = Field(
        None, examples=['2-4 PARK SQUARE, MILTON PARK, ABINGDON OR14 4RN, OXON, ENGLAND']
    )
    url_spec: UrlSpec | None = None


class Publisher1(BaseModel):
    names: Names7 | None = None
    address_spec: AddressSpec4 | None = None


class Publishers1(BaseModel):
    publisher: Publisher1 | None = None


class Summary2(BaseModel):
    EWUID: EWUID1 | None = None
    pub_info: PubInfo2 | None = None
    titles: Titles2 | None = None
    names: Names6 | None = None
    doctypes: Doctypes2 | None = None
    publishers: Publishers1 | None = None


class Language2(BaseModel):
    type: str | None = Field(None, examples=['primary'])


class Languages1(BaseModel):
    count: int | None = Field(None, examples=[1])
    language: Language2 | None = None


class NormalizedLanguages1(BaseModel):
    count: int | None = Field(None, examples=[1])
    language: Language2 | None = None


class NormalizedDoctypes2(BaseModel):
    doctype: list[str] | None = Field(None, examples=['Review', 'Early Access'])
    count: int | None = Field(None, examples=[2])


class Zip3(BaseModel):
    location: str | None = Field(None, examples=['AP'])


class OrganizationItem3(BaseModel):
    pref: str | None = None


class Organizations3(BaseModel):
    organization: list[OrganizationItem3] | None = None
    count: int | None = Field(None, examples=[2])


class Suborganization(BaseModel):
    count: int | None = Field(None, examples=[1])
    suborganization: str | list[str] | None = Field(None, examples=['Parker Inst'])


class AddressSpec5(BaseModel):
    addr_no: int | None = Field(None, examples=[1])
    zip: Zip3 | None = None
    country: str | None = Field(None, examples=['USA'])
    city: str | None = Field(None, examples=['NEW YORK'])
    organizations: Organizations3 | None = None
    full_address: str | None = None
    state: str | None = None
    suborganizations: list[Suborganization] | None = None


class DataItemIds4(BaseModel):
    data_item_id: DataItemId3 | None = Field(None, alias='data-item-id')


class NameItem5(BaseModel):
    seq_no: int | None = Field(None, examples=[1])
    role: str | None = Field(None, examples=['author'])
    claim_status: bool | None = None
    full_name: str | None = Field(None, examples=['Lauridsen, S. V.'])
    addr_no: str | None = Field(None, examples=[1])
    reprint: str | None = Field(None, examples=['Y'])
    last_name: str | None = Field(None, examples=['Lauridsen'])
    display_name: str | None = Field(None, examples=['Lauridsen, S. V.'])
    wos_standard: str | None = Field(None, examples=['Lauridsen, SV'])
    r_id: str | None = None
    daisng_id: int | None = None
    orcid_id: str | None = None
    noncore_startyear: int | None = Field(None, examples=[2011])
    noncore_endyear: int | None = Field(None, examples=[2023])
    first_name: str | None = Field(None, examples=['S. V.'])
    data_item_ids: DataItemIds4 | None = Field(None, alias='data-item-ids')
    preferred_name: PreferredName | None = None


class Names8(BaseModel):
    count: int | None = None
    name: list[NameItem5] | None = None


class AddressNameItem(BaseModel):
    address_spec: AddressSpec5 | None = None
    names: Names8 | None = None


class Addresses1(BaseModel):
    count: int | None = Field(None, examples=[8])
    address_name: list[AddressNameItem] | None = None


class OrganizationItem4(BaseModel):
    pref: str | None = Field(None, examples=['Y'])


class Organizations4(BaseModel):
    organization: list[OrganizationItem4] | None = None
    count: int | None = Field(None, examples=[1])


class Zip4(BaseModel):
    location: str | None = Field(None, examples=['BC'])


class AddressSpec6(BaseModel):
    addr_no: int | None = Field(None, examples=[1])
    full_address: str | None = Field(
        None,
        examples=['Kyoto Prefectural Univ Med, Grad Sch Med Sci, Dept Pulm Med, 465 Kajii Cho, Kamigyo, Kyoto 6028566, Japan'],
    )
    organizations: Organizations4 | None = None
    zip: Zip4 | None = None
    country: str | None = Field(None, examples=['Japan'])
    city: str | None = Field(None, examples=['Kamigyo'])
    street: str | None = Field(None, examples=['465 Kajii Cho'])
    state: str | None = Field(None, examples=['Kyoto'])
    suborganizations: Suborganizations2 | None = None


class Name5(BaseModel):
    seq_no: int | None = Field(None, examples=[1])
    role: str | None = Field(None, examples=['author'])
    full_name: str | None = Field(None, examples=['Urun, Yuksel'])
    reprint: str | None = Field(None, examples=['Y'])
    addr_no: int | None = Field(None, examples=[1])
    last_name: str | None = Field(None, examples=['Urun'])
    display_name: str | None = Field(None, examples=['Urun, Yuksel'])
    wos_standard: str | None = Field(None, examples=['Urun, Y'])
    first_name: str | None = Field(None, examples=['Yuksel'])


class Names9(BaseModel):
    count: int | None = None
    name: Name5 | None = None


class AddressName3(BaseModel):
    address_spec: AddressSpec6 | None = None
    names: Names9 | None = None


class Organizations5(BaseModel):
    organization: list[OrganizationItem4] | None = None
    count: int | None = Field(None, examples=[1])


class AddressSpec7(BaseModel):
    addr_no: int | None = Field(None, examples=[1])
    full_address: str | None = Field(
        None,
        examples=['Kyoto Prefectural Univ Med, Grad Sch Med Sci, Dept Pulm Med, 465 Kajii Cho, Kamigyo, Kyoto 6028566, Japan'],
    )
    organizations: Organizations5 | None = None
    zip: Zip4 | None = None
    country: str | None = Field(None, examples=['Japan'])
    city: str | None = Field(None, examples=['Kamigyo'])
    street: str | None = Field(None, examples=['465 Kajii Cho'])
    state: str | None = Field(None, examples=['Kyoto'])
    suborganizations: Suborganizations2 | None = None


class Names10(BaseModel):
    count: int | None = None
    name: Name5 | None = None


class AddressName4(BaseModel):
    address_spec: AddressSpec7 | None = None
    names: Names10 | None = None


class ReprintAddresses1(BaseModel):
    count: int | None = Field(None, examples=[1])
    address_name: AddressName3 | list[AddressName4] | None = None


class Headings1(BaseModel):
    heading: str | None = Field(None, examples=['Science &amp; Technology'])
    count: int | None = Field(None, examples=[1])


class Subheadings1(BaseModel):
    count: int | None = Field(None, examples=[2])
    subheading: list[str] | None = Field(
        None, examples=['Physical Sciences', 'Technology']
    )


class SubjectItem3(BaseModel):
    ascatype: str | None = Field(None, examples=['traditional'])
    code: str | None = Field(None, examples=['DY'])


class Subjects1(BaseModel):
    subject: list[SubjectItem3] | None = None
    count: int | None = Field(None, examples=[1])


class CategoryInfo1(BaseModel):
    headings: Headings1 | None = None
    subheadings: Subheadings1 | None = None
    subjects: Subjects1 | None = None


class GrantAgencyName1(BaseModel):
    pref: str | None = Field(None, examples=['N'])
    content: str | None = Field(
        None, examples=['Joint Funds for the Innovation of Science and Technology']
    )


class GrantIds1(BaseModel):
    grant_id: list[str] | None = None
    count: int | None = Field(None, examples=[1])


class PrincipalInvestigatorInstitution3(BaseModel):
    lang_id: str | None = Field(None, examples=['en'])
    content: str | None = Field(
        None,
        examples=['Faculdade de Zootecnia e Engenharia de Alimentos (FZEA). Universidade de São Paulo (USP). Pirassununga , SP, Brazil'],
    )


class PrincipalInvestigatorInstitution2(BaseModel):
    principalInvestigatorInstitution: PrincipalInvestigatorInstitution3 | None = None


class PrincipalInvestigatorItem1(BaseModel):
    seq_no: int | None = Field(None, examples=[2])
    lang_id: str | None = Field(None, examples=['en'])
    content: str | None = Field(None, examples=['Miguel Henrique de Almeida Santana'])


class PrincipalInvestigators1(BaseModel):
    principalInvestigatorInstitutions: list[PrincipalInvestigatorInstitution2] | None = None
    principalInvestigator: list[PrincipalInvestigatorItem1] | None = None


class GrantProjectTitle1(BaseModel):
    lang_id: str | None = Field(None, examples=['en'])
    content: str | None = Field(
        None,
        examples=['Integration of multi-omics functional information to better understand the fetal programming effects on bulls'],
    )


class StartDate1(BaseModel):
    startYear: int | None = Field(None, examples=['2024'])
    content: str | None = Field(None, examples=['2024-12-01'])


class GrantSummary1(BaseModel):
    lang_id: str | None = Field(None, examples=['en'])
    content: str | None = Field(
        None,
        examples=[
            'Nutrition during the gestation period in beef cattle impacts on several productive and health phenotypes of the offspring, but the molecular mechanisms of fetal programming are complex and still need to be studied. In this project, an innovative form of analysis is proposed, aiming to integrate different omics to understand the different effects of fetal programming in the offspring. This project seeks to elucidate part of the mechanisms for multiomic and tissue integration in male Nellore animals that have been identified with different prenatal supplementation strategies. This study will be based on 63 animals from 3 different nutritional prenatal treatments: NP - only mineral supplementation (common to all treatments), PP - protein-energy supplementation in the final third of pregnancy and FP - protein-energy supplementation throughout the gestation. We collected several phenotypes (weight, weight gain, scrotal circumference and carcass ultrasound measures) and tissues (plasma, muscle, liver, subcutaneous fat thickness and ruminal fluid) throughout the productive life of the animals. All the animals were genotyped and randomly selected to the omics analyses (N=15; trancriptomics, metabolomics and metagenomics). The integration of transcriptomics and genomic data will be performed using the GALLO package in R, considering the treatments as covariates. From that metabolomic data will be normalized using MetaboAnalyst 5.0, and integration with eQTL results will be done using the Miodin package in R. Metagenomic data from ruminal fluid will be processed with edgeR, and integration with eQTLs will be performed using Miodin package. Phenotypic data, including scrotal circumference, weight, weight gain, and carcass ultrasound measures, will be integrated with eQTL results using the Miodin package also. Statistical methods such as partial least squares (PLS) regression, canonical correlation analysis (CCA) and co-inertia analysis (CIA) will be applied for association analyses. The integrated results will provide insights into the molecular mechanisms and biomarkers associated with the prenatal treatments. This project may demonstrate the biological basis of the influence of fetal programming on the performance of Nellore animals. (AU)'],
    )


class GrantDataItem1(BaseModel):
    principalInvestigators: PrincipalInvestigators1 | None = None
    grantStatus: str | None = None
    grantProjectTitle: GrantProjectTitle1 | None = None
    endDate: str | None = Field(None, examples=['2025-11-30'])
    totalAwardAmount: str | None = None
    coPrincipalInvestigators: str | None = None
    currency: str | None = None
    grantType: str | None = Field(
        None, examples=["Scholarships abroad - Research Internship - Master's degree"]
    )
    startDate: StartDate1 | None = None
    grantSummary: GrantSummary1 | None = None


class GrantData1(BaseModel):
    count: int | None = Field(None, examples=[1])
    grantDataItem: GrantDataItem1 | None = None


class Grant1(BaseModel):
    grant_agency_names: list[GrantAgencyName1] | None = None
    grant_ids: GrantIds1 | None = None
    grant_source: str | None = None
    grant_data: GrantData1 | None = None
    grant_agency: str | None = Field(
        None, examples=['Innovation Team Development Plan, Ministry of Education']
    )


class Grants1(BaseModel):
    count: int | None = Field(None, examples=[1])
    grant: Grant1 | None = None


class FundAck1(BaseModel):
    fund_text: FundText | None = None
    grants: Grants1 | None = None


class Keywords2(BaseModel):
    count: int | None = Field(None, examples=[3])
    keyword: list[str] | None = Field(
        None, examples=['Laser tweezer', 'Raman spectroscopy', 'Liver cancer']
    )


class AbstractText1(BaseModel):
    p: str | None = Field(
        None,
        examples=['Rapid identification of cancer cells is crucial for clinical treatment guidance.'],
    )
    count: int | None = Field(None, examples=[1])


class Abstract1(BaseModel):
    abstract_text: AbstractText1 | None = None


class Abstracts1(BaseModel):
    count: int | None = Field(None, examples=[1])
    abstract: Abstract1 | None = None


class FullrecordMetadata2(BaseModel):
    languages: Languages1 | None = None
    normalized_languages: NormalizedLanguages1 | None = None
    normalized_doctypes: NormalizedDoctypes2 | None = None
    addresses: Addresses1 | None = None
    reprint_addresses: ReprintAddresses1 | None = None
    category_info: CategoryInfo1 | None = None
    fund_ack: FundAck1 | None = None
    keywords: Keywords2 | None = None
    abstracts: Abstracts1 | None = None
    refs: Refs | None = None


class Ids1(BaseModel):
    avail: str | None = Field(None, examples=['N'])


class BibPagecount1(BaseModel):
    type: str | None = Field(None, examples=['Journal'])


class KeywordsPlus1(BaseModel):
    count: int | None = Field(None, examples=[2])
    keyword: list[str] | None = Field(None, examples=['MORTALITY', 'SURVIVORS'])


class Item1(BaseModel):
    xmlns_xsi: str | None = Field(
        None, alias='xmlns:xsi', examples=['http://www.w3.org/2001/XMLSchema-instance']
    )
    xsi_type: str | None = Field(None, alias='xsi:type', examples=['itemType_wos'])
    coll_id: str | None = Field(None, examples=['WOS'])
    ids: Ids1 | None = None
    bib_id: str | None = Field(None, examples=[': - JUL 4 2023'])
    bib_pagecount: BibPagecount1 | None = None
    keywords_plus: KeywordsPlus1 | None = None


class Name7(BaseModel):
    seq_no: int | None = Field(None, examples=[1])
    role: str | None = Field(None, examples=['researcher_rid'])
    full_name: str | None = Field(None, examples=['URUN, YUKSEL'])
    last_name: str | None = Field(None, examples=['URUN'])
    display_name: str | None = Field(None, examples=['URUN, YUKSEL'])
    r_id: str | None = None
    first_name: str | None = Field(None, examples=['YUKSEL'])
    orcid_id: str | None = None


class Contributor1(BaseModel):
    name: Name7 | None = None


class Contributors1(BaseModel):
    contributor: Contributor1 | None = None
    count: int | None = Field(None, examples=[1])


class StaticData2(BaseModel):
    summary: Summary2 | None = None
    fullrecord_metadata: FullrecordMetadata2 | None = None
    item: Item1 | None = None
    contributors: Contributors1 | None = None


class SiloTcItem2(BaseModel):
    coll_id: str | None = Field(None, examples=['WOS'])
    local_count: int | None = Field(None, examples=[0])


class TcList2(BaseModel):
    silo_tc: list[SiloTcItem2] | None = None


class FunctionTcItem2(BaseModel):
    local_count: int | None = Field(
        None, description='The number of citations in this context', examples=[1]
    )
    func_class: FuncClass | None = Field(
        None,
        description='* background - previously published research that orients the current study within a scholarly area.\n* basis - references that report the data sets, methods, concepts and ideas that the author is using for her work directly or on which the author bases her work\n* discuss - references mentioned because the current study is going into a more detailed discussion.\n* support - references which the current study reports to have similar results to. This may also refer to similarities in methodology or in some cases replication of results.\n* differ - references which the current study reports to have differing results to. This may also refer to differences in methodology or differences in sample sizes, affecting results.\n',
    )


class TcListCc2(BaseModel):
    dedup_total_count: int | None = Field(
        None,
        description='Overall number of citing items with citation context',
        examples=[1],
    )
    function_tc: list[FunctionTcItem2] | None = None


class SubjectItem4(BaseModel):
    content_type: str | None = Field(None, alias='content-type', examples=['macro'])
    content_id: str | None = Field(None, alias='content-id', examples=[1])


class SubjGroup2(BaseModel):
    subject: list[SubjectItem4] | None = None


class CitationTopics2(BaseModel):
    subj_group: SubjGroup2 | None = Field(None, alias='subj-group')


class SdgCategory(BaseModel):
    status: str | None = Field(None, examples=['Active'])


class SDGT(BaseModel):
    code: str | None = Field(None, examples=[1406])
    sdg_category: SdgCategory | None = None


class CitationRelated2(BaseModel):
    tc_list: TcList2 | None = None
    tc_list_cc: TcListCc2 | None = Field(
        None,
        description='Citation classifications - describe why it has beed cited. More details [here](https://clarivate.com/webofsciencegroup/release-notes/wos/new-wos-may-12-release-notes/)',
    )
    citation_topics: CitationTopics2 | None = None
    SDG: SDGT | None = None


class IdentifierItem2(BaseModel):
    type: str | None = Field(None, examples=['issn'])
    value: str | None = Field(None, examples=['0169-409X'])


class Identifiers2(BaseModel):
    identifier: list[IdentifierItem2] | None = None


class ClusterRelated2(BaseModel):
    identifiers: Identifiers2 | None = None


class DynamicData2(BaseModel):
    citation_related: CitationRelated2 | None = None
    cluster_related: ClusterRelated2 | None = None
    wos_usage: WosUsage | None = None


class Dates1(BaseModel):
    date_modified: str | None = Field(None, examples=['2023-07-15T01:20:47.053252'])
    date_created: str | None = Field(None, examples=['2023-07-15T01:20:47.053252'])
    date_loaded: str | None = Field(None, examples=['2009-12-31T23:59:59.00000'])


class WosRecordXML(BaseModel):
    UID: str = Field(..., examples=['WOS:001020694100001'])
    static_data: StaticData2
    r_id_disclaimer: str = Field(..., examples=['ResearcherID data provided by Clarivate'])
    dynamic_data: DynamicData2
    dates: Dates1 | None = None


class CategoryContext(BaseModel):
    code: str | None = None
    count: int | None = None
    subject: str | None = None


class Subject(BaseModel):
    code: str | None = None
    count: int | None = None


class CategoryContextXML(BaseModel):
    subject: Subject | None = None


class ErrorMessage(BaseModel):
    code: str | None = Field(None, description='Error Code')
    message: str | None = Field(None, description='Error Message')
    id: str | None = Field(None, description='Request Id')


class ReferenceResponse(BaseModel):
    Data: list[ReferenceRecord] | None = None
    QueryResult: QueryResultT | None = None


class Records1(BaseModel):
    REC: list[WosRecord] | None = None


class RecordsT(BaseModel):
    records: Records1 | None = None


class DataT(BaseModel):
    Records: RecordsT | None = None


class WosSearchResponse(BaseModel):
    Data: DataT | None = None
    QueryResult: QueryResultT | None = None


class Records3(BaseModel):
    REC: list[WosShortRecord] | None = None


class Records2(BaseModel):
    records: Records3 | None = None


class Data1(BaseModel):
    Records: Records2 | None = None


class WosShortSearchResponse(BaseModel):
    Data: Data1 | None = None
    QueryResult: QueryResultT | None = None


class Records4(BaseModel):
    REC: list[WosRecordXML] | None = None


class Val(BaseModel):
    name: str | None = Field(None, examples=['Records'])
    records: Records4 | None = None


class Map3(BaseModel):
    name: str | None = Field(None, examples=['Data'])
    val: Val | None = None


class Map2(BaseModel):
    map: Map3 | None = None


class WosSearchResponseXML(BaseModel):
    map: Map2 | None = None
    QueryResult: QueryResultT | None = None


class Records6(BaseModel):
    REC: list[WosRecord] | None = None


class Records5(BaseModel):
    records: Records6 | None = None


class RetrieveResponse(BaseModel):
    Records: Records5 | None = None


class Records7(BaseModel):
    REC: list[WosRecordXML] | None = None


class Val1(BaseModel):
    name: str | None = Field(None, examples=['Records'])
    records: Records7 | None = None


class Map4(BaseModel):
    val: Val1 | None = None


class RetrieveResponseXML(BaseModel):
    map: Map4 | None = None


class Data2(BaseModel):
    UID: str | None = None
    aggregated: list[CategoryContext] | None = None
    citing: list[CategoryContext] | None = None
    references: list[CategoryContext] | None = None


class CategoryContextResponse(BaseModel):
    Data: Data2 | None = None


class CategoryContextResponseXML(BaseModel):
    UID: str | None = None
    aggregated: list[CategoryContextXML] | None = None
    citing: list[CategoryContextXML] | None = None
    references: list[CategoryContextXML] | None = None


if __name__ == '__main__':
    import json

    from nacsos_data.util import get

    # fp = 'scratch/academic_apis/wos_response.json'
    fp = 'scratch/academic_apis/response2.json'
    with open(fp, 'r') as f:
        data = json.load(f)
        # response = CategoryContextResponse.model_validate(data)
        # print(response)
        records = get(data, 'Data', 'Records', 'records', 'REC', default=[])
        record = records[0]
        wr = WosRecord.model_validate(record)
