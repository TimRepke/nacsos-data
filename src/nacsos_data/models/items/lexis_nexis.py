from __future__ import annotations

import uuid
from datetime import datetime
from enum import Enum
from typing import List, Optional, Any

from pydantic import BaseModel, Field, ConfigDict

from nacsos_data.db.schemas import ItemType
from nacsos_data.models.items.base import ItemModel


class NegativeNewsType(str, Enum):
    Personal = 'Personal'
    Business = 'Business'


class SearchTypeEnum(str, Enum):
    DynamicAnd = ' DynamicAnd'
    DynamicOr = 'DynamicOr'
    NaturalLanguageOr = 'NaturalLanguageOr'
    NaturalLanguageAnd = 'NaturalLanguageAnd'
    Boolean = 'Boolean'


class LanguageEnum(str, Enum):
    English = 'English'
    French = 'French'
    German = 'German'
    Spanish = 'Spanish'
    Dutch = 'Dutch'
    Portuguese = 'Portuguese'
    Italian = 'Italian'
    Russian = 'Russian'
    Japanese = 'Japanese'
    Danish = 'Danish'
    Swedish = 'Swedish'
    Icelandic = 'Icelandic'
    Norwegian = 'Norwegian'
    Indonesian = 'Indonesian'
    Vietnamese = 'Vietnamese'
    Romanian = 'Romanian'
    Turkish = 'Turkish'
    Korean = 'Korean'
    Greek = 'Greek'
    Arabic = 'Arabic'
    Afrikaans = 'Afrikaans'
    Croatian = 'Croatian'
    Czech = 'Czech'
    Catalan = 'Catalan'
    Slovenian = 'Slovenian'
    Estonian = 'Estonian'
    Chinese = 'Chinese'
    Malay = 'Malay'
    Hungarian = 'Hungarian'
    Lithuanian = 'Lithuanian'
    Bulgarian = 'Bulgarian'
    Finnish = 'Finnish'
    Polish = 'Polish'
    Slovak = 'Slovak'


class DocumentObj(BaseModel):
    DocumentId: Optional[str] = Field(None, description='The document identifier.')
    DocumentIdType: Optional[str] = Field(
        None,
        description='Modifies the interpretation of the `DocumentId` property for various classes of document '
                    'identifier. If absent, a default value is applied which is appropriate for all of the document '
                    'identifiers exposed by LexisNexis Web Services API. Potential values are found in the '
                    'DocumentIdType enumeration, but OData protocol restrictions prevent this enumeration from being '
                    'referenced directly.',
    )
    Content: Optional[str] = Field(
        None,
        description='If the Document is not being queried as a Media Link Entry, the Content property contains the '
                    'XML body of the document.',
    )
    Citation: Optional[str] = Field(
        None,
        description='The Citation property can be used in order to look up document results by citation. This can '
                    'result in zero or more document results.',
    )


class GroupDuplicatesEnum(str, Enum):
    HighSimilarity = 'HighSimilarity'
    ModerateSimilarity = 'ModerateSimilarity'


class LexisNexisGlobalIdentifier(BaseModel):
    PguId: Optional[str] = Field(None, description='LNGI identifier of Company')
    CompanyName: Optional[str] = Field(None, description='Name of Company')


class TopicObj(BaseModel):
    Id: Optional[str] = Field(None, description='None')
    Name: Optional[str] = Field(None, description='The name of this legal topic')


class PracticeAreaObj(BaseModel):
    Id: Optional[str] = Field(
        None, description='The identifier for this practice area.'
    )
    Name: Optional[str] = Field(None, description='The name of the practice area.')
    Topics_odata_navigationLink: Optional[str] = Field(
        None,
        alias='Topics@odata.navigationLink',
        description='The list of legal topics which are part of this practice area',
    )


class AppliedPostFilterObj(BaseModel):
    PostFilterName: Optional[str] = Field(
        None, description='The Name of the Postfilter for this AppliedFilter.'
    )
    Name: Optional[str] = Field(
        None, description='The name of the Postfilter Item for this AppliedFilter.'
    )
    Id: Optional[str] = Field(
        None,
        description='The identifier of the Postfilter Item for this AppliedFilter.',
    )
    Count: Optional[int] = Field(
        None,
        description='The number of documents which will be matched if this filter is added to the current search.',
    )


class PostFilterItem(BaseModel):
    Id: Optional[str] = Field(None, description='The identifier for the post filter.')
    Name: Optional[str] = Field(
        None, description='The textual description of the filter.'
    )
    Count: Optional[int] = Field(
        None,
        description='Number of documents which would be matched if this post filter is added to the current search.',
    )
    SearchResults_odata_navigationLink: Optional[str] = Field(
        None,
        alias='SearchResults@odata.navigationLink',
        description='The search results which are generated by applying this post filter to the current search.',
    )


class SummaryType(str, Enum):
    Term = 'Term'
    Extract = 'Extract'


class SourceFilterItem(BaseModel):
    FilterId: Optional[str] = Field(
        None, description='The identifier which is used to filter the source list.'
    )
    FilterValue: Optional[str] = Field(
        None, description='The textual description of the filter.'
    )
    FilterCount: Optional[int] = Field(
        None,
        description='Number of documents which would be matched if this source filter is added to the current search.',
    )


class FilterField(str, Enum):
    ContentType = 'ContentType'
    Jurisdiction = 'Jurisdiction'
    Topic = 'Topic'
    Publisher = 'Publisher'
    Subscription = 'Subscription'
    Alphabetical = 'Alphabetical'
    Geography = 'Geography'


class NewsPostFilter(BaseModel):
    PostFilterId: Optional[str] = Field(None, description='None')
    FilterItems: Optional[List[PostFilterItem]] = None


class SummaryDetails(BaseModel):
    Type: Optional[SummaryType] = None
    SummaryText: Optional[str] = Field(
        None, description='The matched relevant extract within the document.'
    )


class SourceFilter(BaseModel):
    SourceFilterItems: Optional[List[SourceFilterItem]] = None
    FilterName: Optional[str] = Field(None, description='None')
    FilterField: Optional[FilterField] = None


class SourceObj(BaseModel):
    Id: Optional[str] = Field(None, description='The identifier for this source.')
    Geography: Optional[str] = Field(
        None,
        description="Region of the Source. Property will be used to filter the Source Content by Geography. "
                    "Filter can be applied by either using the text or Id eg:($filter= Geography eq 'US' or "
                    "Geography eq 'dXJuOnBjdDo0MzY'). Use $expand=Filters to get the list of available Geographies "
                    "for the user.",
    )
    Name: Optional[str] = Field(None, description='The name for this source.')
    ContentType: Optional[str] = Field(
        None, description='The content type for this source.'
    )
    Jurisdiction: Optional[str] = Field(
        None,
        description="The jurisdiction for this source. This property is only used for filtering, "
                    "and won't be populated in the source results.",
    )
    Publisher: Optional[str] = Field(
        None,
        description="The publisher for this source. This property is only used for filtering, "
                    "and won't be populated in the source results.",
    )
    AlphaCategory: Optional[str] = Field(
        None,
        description="The alphabetical category for this source. This property is only used for filtering, "
                    "and won't be populated in the source results.",
    )
    PublishFrequency: Optional[str] = Field(
        None, description='The frequency at which this source gets published.'
    )
    Coverage: Optional[str] = Field(
        None, description='The dates covered by content from this source.'
    )
    UpdateSchedule: Optional[str] = Field(
        None, description='The schedule for when this source is updated.'
    )
    Description: Optional[str] = Field(
        None, description='The description for this source.'
    )
    PracticeArea: Optional[PracticeAreaObj] = None
    Filters: Optional[List[SourceFilter]] = None


class NewsSearchResult(BaseModel):
    Jurisdiction: Optional[str] = Field(
        None,
        description="The jurisdiction filter shows the locations in US and for the international locations, "
                    "please refer 'InternationalLocation' filter.",
    )
    Location: Optional[str] = Field(
        None,
        description="The location of the publication. This property is typically only used for filtering, "
                    "and won't be populated in the search results.",
    )
    ContentType: Optional[str] = Field(
        None, description='The content type of the news article.'
    )
    Byline: Optional[str] = Field(None, description='The author of the news article.')
    WordLength: Optional[int] = Field(
        None, description='The number of words in the news article.'
    )
    WebNewsUrl: Optional[str] = Field(
        None, description='The external URL source of news article.'
    )
    Geography: Optional[str] = Field(
        None,
        description="The location of the news article. This property is typically only used for filtering, "
                    "and won't be populated in the search results.",
    )
    NegativeNews: Optional[NegativeNewsType] = None
    Language: Optional[LanguageEnum] = None
    Industry: Optional[str] = Field(
        None,
        description="The industry associated with the news article. This property is typically only used for "
                    "filtering, and won't be populated in the search results.",
    )
    People: Optional[str] = Field(
        None,
        description="Well-known people referenced by the news article. This property is typically only used for "
                    "filtering, and won't be populated in the search results.",
    )
    Subject: Optional[str] = Field(
        None,
        description="The subject matter of the news article. This property is typically only used for filtering, "
                    "and won't be populated in the search results.",
    )
    Section: Optional[str] = Field(None, description='The section of the news article.')
    Company: Optional[str] = Field(
        None,
        description="The company or companies associated with the news article. This property is typically only "
                    "used for filtering, and won't be populated in the search results.",
    )
    PublicationType: Optional[str] = Field(
        None,
        description="The publication type associated with the news article. This property is typically only "
                    "used for filtering, and won't be populated in the search results.",
    )
    Publisher: Optional[str] = Field(
        None,
        description="The Publisher associated with the news article. This property is typically only used for "
                    "filtering, and won't be populated in the search results.",
    )
    Document: Optional[DocumentObj] = None
    GroupDuplicates: Optional[GroupDuplicatesEnum] = None
    SimilarDocuments: Optional[List[NewsSearchResult]] = None
    InternationalLocation: Optional[str] = Field(
        None,
        description='InternationalLocation filter appears when International is selected in the Jurisdiction filter.',
    )
    LEI: Optional[List[str]] = Field(
        None,
        description='List of Legal Entity Identifier of the company releated to the News.',
    )
    CompanyName: Optional[List[str]] = Field(
        None, description='List of CompanyNames related to the News.'
    )
    LNGI: Optional[List[LexisNexisGlobalIdentifier]] = None
    SearchWithinResults: Optional[str] = Field(
        None,
        description="SearchWithinResults which is used to further narrow down the results after the initial search. "
                    "This property is typically only used for filtering, and won't be populated in the search results.",
    )
    Exclusions: Optional[str] = Field(
        None,
        description="The Exclusions of the News. This property is typically only used for filtering, "
                    "and won't be populated in the search results.",
    )
    ResultId: Optional[str] = Field(
        None,
        description='The search result identifier.  This will typically also be the identity of the document '
                    'associated with this search result.',
    )
    SearchType: SearchTypeEnum | None = None
    Source: Optional[SourceObj] = None
    Topic: Optional[TopicObj] = None
    PracticeArea: Optional[PracticeAreaObj] = None
    Date: Optional[datetime] = Field(None, description='The publication date.')
    Keyword: Optional[str] = Field(
        None,
        description='A keyword which is used to refine the search.  Search terms should typically be entered '
                    'using the $search query string parameter, and the set of available keywords is returned in '
                    'the PostFilter collection.',
    )
    PostFilters: Optional[List[NewsPostFilter]] = None
    AppliedPostFilter: Optional[List[AppliedPostFilterObj]] = None
    Title: Optional[str] = Field(
        None, description="The title of the search result's document."
    )
    DocumentContent_odata_mediaContentType: Optional[str] = Field(
        None,
        alias='DocumentContent@odata.mediaContentType',
        description='Content-type of the document associated with this result',
    )
    DocumentContent_odata_mediaReadLink: Optional[str] = Field(
        None,
        alias='DocumentContent@odata.mediaReadLink',
        description='A reference to the content of the document associated with this search result.',
    )
    Overview: Optional[str] = Field(
        None, description='Contains the overview of the contents within the document.'
    )
    Extracts: Optional[List[SummaryDetails]] = None
    IsCitationMatch: Optional[bool] = Field(
        None,
        description='True if this result has a legal citation that matches the search terms, otherwise false.',
    )
    SourcePath: Optional[str] = Field(None, description='None')

    model_config = ConfigDict(extra='allow')


NewsSearchResult.model_rebuild()


class LexisNexisObject(NewsSearchResult):
    pass


class LexisNexisDocument(BaseModel):
    title: str | None = None
    teaser: str | None = None
    text: str | None = None
    published: str | None = None
    updated: str | None = None
    authors: list[str] | None = None
    authors_sec: list[str] | None = None
    section: str | None = None
    subsection: str | None = None


class LexisNexisItemSourceModel(BaseModel):
    item_source_id: str | uuid.UUID | None = None
    item_id: str | uuid.UUID | None = None
    lexis_id: str

    name: str | None = None
    title: str | None = None

    section: str | None = None
    jurisdiction: str | None = None
    location: str | None = None
    content_type: str | None = None

    published_at: datetime | None = None
    updated_at: datetime | None = None

    meta: dict[str, Any] | None = None


class LexisNexisItemModel(ItemModel):
    # ItemModel.project_id
    # ItemModel.item_id
    # ItemModel.text
    type: ItemType = ItemType.lexis

    teaser: str | None = None
    authors: list[str] | None = None


class FullLexisNexisItemModel(LexisNexisItemModel):
    sources: list[LexisNexisItemSourceModel] | None = None
