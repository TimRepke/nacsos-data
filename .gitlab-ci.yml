# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Python.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.11.8

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/reference/pip_install/#caching
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

build-job:
  except:
    - schedules
  stage: build
  script:
    - python -V
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pwd
    - ls -lisah
    - pip install -r requirements.txt

test-job1:
  except:
    - schedules
  stage: test
  script:
    - source venv/bin/activate
    - flake8 --config .flake8

test-job2:
  except:
    - schedules
  stage: test
  script:
    - source venv/bin/activate
    - mypy --config-file=pyproject.toml src/nacsos_data --show-traceback --no-incremental

sync-staging:
  script:
    - pg_dump -C -Fd -Z 9 -j 12 -p 5432 -f pgstash -d nacsos_core -h 0.0.0.0
    - pg_lsclusters
    - sudo mv pgstash /var/lib/postgresql
    - sudo chmod -R ug+x /var/lib/postgresql/pgstash
    - sudo chown -R postgres:postgres /var/lib/postgresql/pgstash
    - sudo -u postgres bash
    - cd /var/lib/postgresql
    #- createdb -p 8010 -U postgres nacsos_core
    # TODO: clear old staging db
    - /usr/lib/postgresql/16/bin/pg_restore -F d -j 12 -p 8010 -C -d nacsos_core pgstash/
  when: manual
  tags:
    - vm,bare-metal

backup-nacsos:
  only:
    - schedules
  tags:
    - vm,bare-metal
  script:
    - export BACKUP_NAME="backup_$(date +"%Y-%m-%dT%H-%M-%S")"
    - export BACKUP_PATH="${BACKUP_LOCATION}/${BACKUP_NAME}"
    #
    - echo "Echo some variables, just for debug purposes"
    - echo $REMOTE_TARGET
    - echo $REMOTE_DAY
    - echo $BACKUP_LOCATION
    - echo $BACKUP_NAME
    - echo $BACKUP_PATH
    - echo $KEEP_DAILY
    - echo $KEEP_WEEKLY
    - echo $DB_DATABASE
    - echo $DB_HOST
    - echo $DB_PORT
    #
    - echo "Go to target location and have a look"
    - cd $BACKUP_LOCATION
    - ls -lisah .
    #
    - echo "Run the actual database export"
    - export PGPASSWORD="${DB_PASSWORD}"
    - pg_dump -Fd -j 12 -Z 9 -d ${DB_DATABASE} -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -v --file="${BACKUP_PATH}"
    #
    - echo "Check that the backup worked out"
    - ls -lisah .
    - du -hd1 .
    #
    - echo "Put the backup folder into an archive and delete the folder"
    - tar czvf ${BACKUP_PATH}.tar.gz ${BACKUP_NAME}
    - ls -lisah .
    - rm -r ${BACKUP_PATH}
    - ls -lisah .
    #
    - echo "Keep the six most recent backups and drop the rest"
    - ls -tp | grep -v '/$' | tail -n +$KEEP_DAILY | xargs -I {} rm -- {}
    - ls -lisah .
    # On Sunday, move the backup
    - |-
      if [ $(date +"%u") = $REMOTE_DAY ]; then
        echo "Time for a remote backup, syncing to MCC Synology"
        scp ${BACKUP_PATH}.tar.gz apsis-backup@10.10.14.150:${REMOTE_TARGET}
        echo "remote ls of ${REMOTE_TARGET}" 
        ssh apsis-backup@10.10.14.150 "ls -lisah ${REMOTE_TARGET}"
        echo "dropping older files"
        ssh apsis-backup@10.10.14.150 "cd ${REMOTE_TARGET}; ls -tp | grep -v '/$' | tail -n +${KEEP_WEEKLY} | xargs -I {} rm -- {}"
        echo "remote ls of ${REMOTE_TARGET} (after rm tail)"
        ssh apsis-backup@10.10.14.150 "ls -lisah ${REMOTE_TARGET}"
      else
        echo "Not syncing backup with remote."
      fi
